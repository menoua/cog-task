//@ savage
//@ python

(
    name: "Function",
    version: "0.1",
    description: r#"This is a basic task demonstrating the use of "fasteval", "savage", and "python" interpreters."#,

    config: (
        blocks_per_row: 3,
    ),

    blocks: [
        (
            name: "fasteval",
            config: (
                interpreter: fasteval
            ),
            tree: seq(([
                par(([
                    instruction((
                        header: "Factorials",
                        text: "${n}-th factorial: ${x}",
                        in_mapping: { 1: "n", 2: "x" }
                    ))
                ], [
                    clock((
                        step: 1,
                        from: 1,
                        on_start: true,
                        out_tic: 1,
                    )),
                    function((
                        expr: "self * n",
                        vars: { "self": 1, "n": 1 },
                        in_mapping: { 1: "n" },
                        out_result: 2,
                    ))
                ]))
            ]))
        ),

        (
            name: "Savage",
            config: (
                interpreter: savage
            ),
            tree: seq(([
                par(([
                    instruction((
                        header: "Factorials",
                        text: "${n}-th factorial: ${x}",
                        in_mapping: { 1: "n", 2: "x" }
                    ))
                ], [
                    clock((
                        step: 1,
                        from: 1,
                        on_start: true,
                        out_tic: 1,
                    )),
                    function((
                        expr: "factorial(n)",
                        vars: { "n": 1 },
                        in_mapping: { 1: "n" },
                        out_result: 2,
                    ))
                ])),

                par(([
                    instruction((
                        header: "Factorials",
                        text: "${n}-th prime: ${x}",
                        in_mapping: { 3: "n", 4: "x" }
                    ))
                ], [
                    clock((
                        step: 1,
                        from: 1,
                        on_start: true,
                        out_tic: 3,
                    )),
                    function((
                        expr: "nth_prime(n)",
                        vars: { "n": 1 },
                        in_mapping: { 3: "n" },
                        out_result: 4,
                    ))
                ]))
            ]))
        ),

        (
            name: "Python",
            config: (
                interpreter: python
            ),
            tree: seq(([
                par(([
                    instruction((
                        header: "Factorials",
                        text: "${n}-th factorial: ${x}",
                        in_mapping: { 2: "n", 3: "x" }
                    ))
                ], [
                    clock((
                        step: 1,
                        out_tic: 1,
                    )),
                    function((
                        expr: "self + 1",
                        vars: { "self": 0 },
                        interpreter: fasteval,
                        in_update: 1,
                        out_result: 2,
                    )),
                    function((
                        init_src: "factorials_init.py",
                        expr: "next_factorial()",
                        vars: { "self": 1 },
                        in_update: 1,
                        out_result: 3,
                    ))
                ])),

                par(([
                    instruction((
                        header: "Primes",
                        text: "${n}-th prime: ${x}",
                        params: { "n": "1" },
                        in_mapping: { 4: "n", 5: "x" }
                    ))
                ], [
                    clock((
                        step: 1,
                        from: 1,
                        out_tic: 4,
                    )),
                    function((
                        init_src: "primes_init.py",
                        src: "primes_eval.py",
                        vars: { "self": 1 },
                        in_update: 4,
                        out_result: 5,
                    ))
                ]))
            ]))
        ),

        (
            name: "Non-blocking",
            tree: par(([
                instruction((
                    text: "Blocking update: ${b}\nNon-blocking update: ${nb}",
                    in_mapping: { 2: "b", 4: "nb" }
                ))
            ], [
                function((
                    src: "blocking_update.py",
                    vars: { "self": 0 },
                    interpreter: python,
                    on_start: true,
                    in_update: 1,
                    lo_response: 1,
                    out_result: 2,
                )),
                function((
                    src: "lazy_update.py",
                    vars: { "self": 0 },
                    interpreter: python,
                    on_start: true,
                    in_update: 3,
                    lo_response: 3,
                    out_result: 4,
                ))
            ]))
        )
    ]
)
