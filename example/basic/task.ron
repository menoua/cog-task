(
    name: "Basic",
    version: "0.1",

    config: (
        blocks_per_row: 3,
    ),

    blocks: [
        (
            name: "Basic",
            config: (
                background: rgba(0, 80, 240, 64),
            ),
            tree: seq(([
                par(([
                    seq(([
                        timeout((1, instruction((text: "3", static: true)))),
                        timeout((1, instruction((text: "2", static: true)))),
                        timeout((1, instruction((text: "1", static: true)))),
                    ]))
                ], [
                    event(("countdown")),
                ])),
                par(([
                    instruction((
                        text: "Key presses will be logged until you click \"Next\".",
                    )),
                ], [
                    event(("some_event")),
                    key_logger((group: "section1")),
                    key_logger((group: "all_keys")),
                    fixation(()),
                ],
                    any
                )),
                instruction((
                    text: "Press a key when you see \"Now\".\nYour reaction time will be measured and reported afterwards.",
                )),
                par(([
                    seq(([
                        wait((2.0)),
                        timeout((0.2, instruction((text: "Now", static: true)))),
                        wait((1.8)),
                        timeout((0.2, instruction((text: "Now", static: true)))),
                        wait((1.8)),
                    ]))
                ], [
                    event(("quiz")),
                    reaction((
                        times: [2, 4],
                        tol: 1,
                        group: "quizes",
                        out_accuracy: 1,
                        out_recall: 2,
                        out_mean_rt: 3,
                    )),
                ])),
                instruction((
                    text: "Accuracy: ${acc}\nRecall: ${rec}\nMean RT: ${mean_rt_10}",
                    in_mapping: { 1: "acc", 2: "rec", 3: "mean_rt_10" }
                )),
                function((
                    expr: "(x > 0.99) && (y > 0.99)",
                    vars: { "x": 0, "y": 0 },
                    in_mapping: { 1: "x", 2: "y" },
                    out_result: 4,
                    name: "condition",
                    once: true,
                )),
                switch((
                    in_control: 4,
                    if_true: instruction((
                        text: "Solid performance."
                    )),
                    if_false: instruction((
                        text: "Better luck next time."
                    )),
                ))
            ]))
        ),

        (
            name: "Scaling",
            tree: seq(([
                timeout((1.0, fixation(()))),
                timeout((1.0, fixation((width: 50.0)))),
                timeout((1.0, fixation((width: 150.0)))),
                timeout((1.0, fixation((width: 600.0)))),
                timeout((1.0, image((src: "rustacean.svg", background: transparent)))),
                timeout((1.0, image((src: "rustacean.svg", background: yellow, width: 50.0)))),
                timeout((1.0, image((src: "rustacean.svg", background: green, width: 150.0)))),
                timeout((1.0, image((src: "rustacean.svg", background: blue, width: 600.0)))),
            ]))
        ),

        (
            name: "Stacked",
            tree: seq(([
                timeout((
                    5.0,
                    horizontal(([
                        image((src: "rustacean.svg", background: yellow, width: 200.0)),
                        vertical(([
                            fixation((background: yellow)),
                            image((src: "rustacean.svg", width: 600.0)),
                            fixation((background: blue)),
                        ], [
                            0.15, 0.5, 0.15
                        ])),
                        image((src: "rustacean.svg", background: blue, width: 400.0)),
                    ]))
                )),
            ]))
        ),

        (
            name: "Stacked with overflow",
            tree: seq(([
                pointer((
                    inner: horizontal(([
                        image((src: "rustacean.svg", background: yellow, width: 200.0)),
                        vertical(([
                            fixation((background: yellow)),
                            image((src: "rustacean.svg", width: 200.0)),
                            fixation((background: blue)),
                        ], [
                            0.15, 0.5, 0.15
                        ])),
                        image((src: "rustacean.svg", background: blue, width: 200.0)),
                    ], [
                        0.3333, 0.3333, 0.3333
                    ])),
                    until: click
                )),
                pointer((
                    inner: horizontal(([
                        image((src: "rustacean.svg", background: yellow, width: 900.0)),
                        vertical(([
                            fixation((background: yellow)),
                            image((src: "rustacean.svg", width: 700.0)),
                            fixation((background: blue)),
                        ], [
                            0.15, 0.5, 0.15
                        ])),
                        image((src: "rustacean.svg", background: blue, width: 900.0)),
                    ], [
                        0.3333, 0.3333, 0.3333
                    ])),
                    until: click
                ))
            ]))
        ),

        (
            name: "Pointer",
            tree: seq(([
                rect((
                    (200, 133.3),
                    pointer((
                        inner: image((src: "rustacean.svg", width: 200.0, pad: false)),
                        mask: "rustacean.svg",
                        mask_width: 200,
                        group: "click",
                        until: hit,
                    )),
                    red
                )),
                rect((
                    (200, 133.3),
                    pointer((
                        inner: image((src: "rustacean.svg", width: 200.0, pad: false)),
                        mask: "rustacean.svg",
                        mask_width: 200,
                        group: "click",
                        until: hit,
                    )),
                    blue
                )),
                rect((
                    (200, 133.3),
                    pointer((
                        inner: image((src: "rustacean.svg", width: 200.0, pad: false)),
                        mask: "rustacean.svg",
                        mask_width: 200,
                        group: "click",
                        until: hit,
                    )),
                    yellow
                ))
            ]))
        ),

        (
            name: "Pointer accuracy",
            state: { 1: false },
            tree: repeat((
                inner: switch((
                    default: false,
                    if: rect((
                        (200, 133.3),
                        pointer((
                            inner: image((src: "rustacean.svg", width: 200.0, pad: false)),
                            mask: "rustacean.svg",
                            mask_width: 200,
                            group: "click",
                            until: click,
                            out_hit: 1,
                        )),
                        green
                    )),
                    else: rect((
                        (200, 133.3),
                        pointer((
                            inner: image((src: "rustacean.svg", width: 200.0, pad: false)),
                            mask: "rustacean.svg",
                            mask_width: 200,
                            group: "click",
                            until: click,
                            out_hit: 1,
                        )),
                        red
                    )),
                    in_control: 1
                ))
            ))
        ),

        (
            name: "Repeat until keypress",
            tree: par(([
                until((
                    in_event: 1,
                    inner: repeat((
                        inner: seq(([
                            timeout((0.5, fixation((width: 50.0)))),
                            timeout((0.5, fixation((width: 150.0)))),
                            timeout((0.5, fixation((width: 600.0)))),
                            timeout((0.5, image((src: "rustacean.svg", width: 50.0)))),
                            timeout((0.5, image((src: "rustacean.svg", width: 150.0)))),
                            timeout((0.5, image((src: "rustacean.svg", width: 600.0)))),
                        ]))
                    ))
                ))
            ], [
                key_logger((out_key: 1))
            ]))
        ),

        (
            name: "Stylized text",
            tree: seq(([
                instruction((src: "instruction-1.txt", header: "From file")),
                timeout((
                    1.5,
                    instruction((
                        text: "1. First\n2. Second\n3. Third and last",
                        static: true
                    )),
                )),
            ]))
        ),

        (
            name: "Lazy start",
            tree: delayed((
                3.0,
                instruction((text: "This text should have appeared 3 seconds after block start")),
            ))
        ),

        (
            name: "Nested actions",
            tree: seq(([
                template((src: "question-1.ron", params: {"group": "first"})),
                template((src: "question-1.ron", params: {"group": "second"})),
            ]))
        ),

        (
            name: "Integers squares and cubes",
            tree: par(([
                instruction((
                    text: "n=${num}\tn^2=${sqr}\tn^3=${cub}",
                    in_mapping: {
                        1: "num",
                        2: "sqr",
                        3: "cub",
                    },
                ))
            ], [
                clock((
                    step: 0.5,
                    on_start: true,
                    out_tic: 1,
                )),
                function((
                    expr: "n ^ 2",
                    vars: { "n": 0 },
                    in_mapping: { 1: "n" },
                    out_result: 2,
                )),
                function((
                    expr: "n ^ 3",
                    vars: { "n": 0 },
                    in_mapping: { 1: "n" },
                    out_result: 3,
                )),
                logger((
                    group: "numbers",
                    in_mapping: {
                        1: "integer",
                        2: "square",
                        3: "cube",
                    }
                ))
            ]))
        ),

        (
            name: "Fan-in",
            tree: par(([
                instruction((
                    text: "*${x}*  /${y}/",
                    in_mapping: { 5: "x", 7: "y" }
                ))
            ], [
                clock((step: 1, out_tic: 1)),
                delayed((0.25, clock((step: 1, out_tic: 2)))),
                delayed((0.5, clock((step: 1, out_tic: 3)))),
                merge((
                    in_many: [1, 2, 3],
                    out_one: 4,
                )),
                function((
                    expr: "(self + 1) % 4",
                    vars: { "self": 0 },
                    in_update: 4,
                    out_result: 5,
                )),
                clock((step: 0.25, out_tic: 6)),
                function((
                    expr: "(self + 1) % 4",
                    vars: { "self": 0 },
                    in_update: 6,
                    out_result: 7,
                )),
            ]))
        ),

        (
            name: "Empty block",
            tree: nil(())
        ),

        (
            name: "Unreachable actions",
            tree: seq(([
                fixation(()),
                instruction((text: "This action is unreachable.")),
            ]))
        ),

        (
            name: "Delay overhead",
            tree: seq(([
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
                wait((0.5)), timeout((0.5, fixation((background: red)))),
                wait((0.5)), timeout((0.5, fixation((background: white)))),
                wait((0.5)), timeout((0.5, fixation((background: blue)))),
                wait((0.5)), timeout((0.5, fixation((background: rgb(180, 180, 0))))),
                wait((0.5)), timeout((0.5, fixation((background: rgba(180, 180, 0, 127))))),
            ]))
        ),
    ]
)
