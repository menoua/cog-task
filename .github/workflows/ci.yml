name: CI

on:
  pull_request:
  push:
    branches: [main, master]
    paths:
      - .github/workflows/ci.yml
      - src/**
      - build.rs
      - Cargo.toml

env:
  RUSTFLAGS: "-C debuginfo=0 -D warnings"
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        toolchain: [stable]
        include:
          - os: macos-latest
            MACOS: true
          - os: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.toolchain }} toolchain
        id: install_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Cargo check
        run: cargo fmt --all -- --check

      - name: Cargo clippy (default)
        run: cargo clippy -- -D warnings
      - name: Cargo test (default)
        run: cargo test --all-targets

      - name: Install linux deps (audio)
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends libasound2-dev pkg-config
        if: contains(matrix.os, 'ubuntu')

      - name: Cargo clippy (audio)
        run: cargo clippy --features=audio -- -D warnings
      - name: Cargo test (audio)
        run: cargo test --features=audio --all-targets

      - name: Install macOS deps (ffmpeg)
        run: |
          brew install ffmpeg
        if: contains(matrix.os, 'macos')
      - name: Install linux deps (ffmpeg)
        run: |
          sudo apt install -y --no-install-recommends ffmpeg libavutil-dev libavfilter-dev libavdevice-dev
        if: contains(matrix.os, 'ubuntu')

      - name: Cargo clippy (ffmpeg)
        run: cargo clippy --features=ffmpeg -- -D warnings
      - name: Cargo test (ffmpeg)
        run: cargo test --features=ffmpeg --all-targets

      - name: Install macOS deps (gstreamer)
        run: |
          brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav gst-rtsp-server
        if: contains(matrix.os, 'macos')
      - name: Install linux deps (gstreamer)
        run: |
          sudo apt install -y --no-install-recommends libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-alsa gstreamer1.0-pulseaudio
        if: contains(matrix.os, 'ubuntu')

      - name: Cargo clippy (gstreamer)
        run: cargo clippy --features=gstreamer -- -D warnings
      - name: Cargo test (gstreamer)
        run: cargo test --features=gstreamer --all-targets

      - name: Cargo clippy (full)
        run: cargo clippy --features=full -- -D warnings
      - name: Cargo test (full)
        run: cargo test --features=full --all-targets

  cargo-publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    env:
      CRATESIO_TOKEN: ${{ secrets.CRATESIO_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Update apt
        run: sudo apt update
      - name: Install alsa
        run: sudo apt install -y --no-install-recommends libasound2-dev pkg-config
      - name: Run cargo publish for crate
        continue-on-error: true
        run: |
          COG_TASK_TMP=$(mktemp /tmp/cog_taskXXX.txt) || echo "::error::mktemp error"
          echo "COG_TASK_TMP=$COG_TASK_TMP" >> $GITHUB_ENV
          cargo publish --token $CRATESIO_TOKEN 2> $COG_TASK_TMP
      - name: Check if crate is already published
        run: |
          empty=0
          COG_TASK_TMP="${{ env.COG_TASK_TMP }}"
          grep -q '[^[:space:]]' < $COG_TASK_TMP || empty=1
          [ $empty -eq 0 ] && cat $COG_TASK_TMP
          [ $empty -eq 1 ] || grep -q "is already uploaded" < $COG_TASK_TMP
